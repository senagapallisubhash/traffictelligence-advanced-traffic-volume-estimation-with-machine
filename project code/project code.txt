import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# Load dataset
df = pd.read_csv('traffic_data.csv')

# Preprocessing: Convert categorical variables to numeric using LabelEncoder
le = LabelEncoder()
df['weather'] = le.fit_transform(df['weather'])

# Feature Engineering: Extract hour of day, day of the week, etc.
df['hour_of_day'] = pd.to_datetime(df['timestamp']).dt.hour
df['day_of_week'] = pd.to_datetime(df['timestamp']).dt.dayofweek
df['month'] = pd.to_datetime(df['timestamp']).dt.month

# Drop the 'timestamp' column
df.drop('timestamp', axis=1, inplace=True)

# Split data into features and target
X = df.drop('traffic_volume', axis=1)
y = df['traffic_volume']

# Train-test split (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model (Random Forest Regressor)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions on test data
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")

# Feature Importance (which features are important for predicting traffic volume)
feature_importances = model.feature_importances_
features = X.columns
feature_importance_df = pd.DataFrame({
    'Feature': features,
    'Importance': feature_importances
}).sort_values(by='Importance', ascending=False)

print("Feature Importances:")
print(feature_importance_df)

# Plotting Feature Importance
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title('Feature Importance for Traffic Volume Prediction')
plt.show()

# Plotting Predicted vs Actual Traffic Volume
plt.figure(figsize=(10,6))
plt.plot(y_test.values, label="Actual Traffic Volume", color='blue')
plt.plot(y_pred, label="Predicted Traffic Volume", color='red', linestyle='dashed')
plt.legend()
plt.title("Actual vs Predicted Traffic Volume")
plt.show()
